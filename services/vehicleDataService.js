const InfoAutosApi = require('../classes/infoAutosApi');
const config = require('../config/infoAutos');

class VehicleDataService {
  constructor() {
    this.infoAutosApi = new InfoAutosApi();
    this.infoAutosApi.setTokens(config.ACCESS_TOKEN, config.REFRESH_TOKEN);
  }

  // Obtener a√±os disponibles
  async getYears() {
    try {
      console.log('üìÖ Obteniendo a√±os desde Info Autos...');
      const years = await this.infoAutosApi.getYears();
      console.log(`‚úÖ A√±os obtenidos: ${years.length}`);
      return years;
    } catch (error) {
      console.error('‚ùå Error obteniendo a√±os:', error);
      throw error;
    }
  }

  // Obtener marcas por a√±o
  async getBrands(year) {
    try {
      console.log(`üè∑Ô∏è Obteniendo marcas para a√±o ${year} desde Info Autos...`);
      const brands = await this.infoAutosApi.getBrands(year);
      console.log(`‚úÖ Marcas obtenidas para a√±o ${year}: ${brands.length}`);
      return brands;
    } catch (error) {
      console.error(`‚ùå Error obteniendo marcas para a√±o ${year}:`, error);
      throw error;
    }
  }

  // Obtener modelos por marca y a√±o
  async getModels(year, brandId) {
    try {
      console.log(`üöó Obteniendo modelos para marca ${brandId} a√±o ${year} desde Info Autos...`);
      const models = await this.infoAutosApi.getModels(year, brandId);
      console.log(`‚úÖ Modelos obtenidos para marca ${brandId}: ${models.length}`);
      return models;
    } catch (error) {
      console.error(`‚ùå Error obteniendo modelos para marca ${brandId} a√±o ${year}:`, error);
      throw error;
    }
  }

  // Obtener versiones por modelo, marca y a√±o
  async getVersions(year, brandId, modelId) {
    try {
      console.log(`üîß Obteniendo versiones para modelo ${modelId} marca ${brandId} a√±o ${year} desde Info Autos...`);
      const versions = await this.infoAutosApi.getVersions(year, brandId, modelId);
      console.log(`‚úÖ Versiones obtenidas para modelo ${modelId}: ${versions.length}`);
      return versions;
    } catch (error) {
      console.error(`‚ùå Error obteniendo versiones para modelo ${modelId}:`, error);
      throw error;
    }
  }

  // Verificar estado de la conexi√≥n
  async checkConnection() {
    try {
      const result = await this.infoAutosApi.checkConnection();
      return result;
    } catch (error) {
      return {
        success: false,
        message: 'Error de conexi√≥n con Info Autos',
        error: error.message
      };
    }
  }

  // Obtener estad√≠sticas de uso de tokens
  getTokenStats() {
    return this.infoAutosApi.getTokenStats();
  }

  // Refrescar tokens si es necesario
  async refreshTokensIfNeeded() {
    try {
      if (this.infoAutosApi.isTokenExpired()) {
        console.log('üîÑ Token expirado, refrescando...');
        await this.infoAutosApi.refreshAccessToken();
        console.log('‚úÖ Tokens refrescados correctamente');
      }
    } catch (error) {
      console.error('‚ùå Error refrescando tokens:', error);
      throw error;
    }
  }
}

module.exports = VehicleDataService;
