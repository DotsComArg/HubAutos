const InfoAutosApi = require('../classes/infoAutosApi');
const config = require('../config/infoAutos');
const fallbackData = require('../data/fallbackData');

class VehicleDataService {
  constructor() {
    this.infoAutosApi = new InfoAutosApi();
    this.infoAutosApi.setTokens(config.ACCESS_TOKEN, config.REFRESH_TOKEN);
    this.useFallbackForYears = false;
  }

  // Obtener a√±os disponibles
  async getYears() {
    try {
      console.log('üìÖ Obteniendo a√±os desde Info Autos...');
      const years = await this.infoAutosApi.getYears();
      console.log(`‚úÖ A√±os obtenidos: ${years.length}`);
      
      if (years && years.length > 0) {
        this.useFallbackForYears = false;
        return years;
      } else {
        console.log('‚ö†Ô∏è Info Autos devolvi√≥ array vac√≠o para a√±os, usando datos de fallback');
        this.useFallbackForYears = true;
        return fallbackData.years;
      }
    } catch (error) {
      console.error('‚ùå Error obteniendo a√±os desde Info Autos, usando fallback:', error);
      this.useFallbackForYears = true;
      return fallbackData.years;
    }
  }

  // Obtener marcas por a√±o
  async getBrands(year) {
    try {
      console.log(`üè∑Ô∏è Obteniendo marcas para a√±o ${year} desde Info Autos...`);
      const brands = await this.infoAutosApi.getBrands(year);
      console.log(`‚úÖ Marcas obtenidas para a√±o ${year}: ${brands.length}`);
      
      if (brands && brands.length > 0) {
        return brands;
      } else {
        console.log('‚ö†Ô∏è Info Autos devolvi√≥ marcas vac√≠as');
        return [];
      }
    } catch (error) {
      console.error(`‚ùå Error obteniendo marcas para a√±o ${year}:`, error);
      return [];
    }
  }

  // Obtener modelos por marca y a√±o
  async getModels(year, brandId) {
    try {
      console.log(`üöó Obteniendo modelos para marca ${brandId} a√±o ${year} desde Info Autos...`);
      const models = await this.infoAutosApi.getModels(year, brandId);
      console.log(`‚úÖ Modelos obtenidos para marca ${brandId}: ${models.length}`);
      
      if (models && models.length > 0) {
        return models;
      } else {
        console.log('‚ö†Ô∏è Info Autos devolvi√≥ modelos vac√≠os');
        return [];
      }
    } catch (error) {
      console.error(`‚ùå Error obteniendo modelos para marca ${brandId} a√±o ${year}:`, error);
      return [];
    }
  }

  // Obtener TODOS los modelos de una marca (sin filtrar por a√±o)
  async getAllModelsForBrand(brandId) {
    try {
      console.log(`üöó Obteniendo TODOS los modelos para marca ${brandId} desde Info Autos...`);
      const models = await this.infoAutosApi.getAllModelsForBrand(brandId);
      console.log(`‚úÖ Total de modelos obtenidos para marca ${brandId}: ${models.length}`);
      
      if (models && models.length > 0) {
        return models;
      } else {
        console.log('‚ö†Ô∏è Info Autos devolvi√≥ modelos vac√≠os');
        return [];
      }
    } catch (error) {
      console.error(`‚ùå Error obteniendo todos los modelos para marca ${brandId}:`, error);
      return [];
    }
  }

  // Obtener versiones por modelo, marca y a√±o
  async getVersions(year, brandId, modelId) {
    try {
      console.log(`üîß Obteniendo versiones para modelo ${modelId} marca ${brandId} a√±o ${year} desde Info Autos...`);
      const versions = await this.infoAutosApi.getVersions(year, brandId, modelId);
      console.log(`‚úÖ Versiones obtenidas para modelo ${modelId}: ${versions.length}`);
      
      if (versions && versions.length > 0) {
        return versions;
      } else {
        console.log('‚ö†Ô∏è Info Autos devolvi√≥ versiones vac√≠as');
        return [];
      }
    } catch (error) {
      console.error(`‚ùå Error obteniendo versiones para modelo ${modelId}:`, error);
      return [];
    }
  }

  // Verificar estado de la conexi√≥n
  async checkConnection() {
    try {
      const result = await this.infoAutosApi.checkConnection();
      return result;
    } catch (error) {
      return {
        success: false,
        message: 'Error de conexi√≥n con Info Autos',
        error: error.message
      };
    }
  }

  // Obtener estad√≠sticas de uso de tokens
  getTokenStats() {
    return this.infoAutosApi.getTokenStats();
  }

  // Refrescar tokens si es necesario
  async refreshTokensIfNeeded() {
    try {
      if (this.infoAutosApi.isTokenExpired()) {
        console.log('üîÑ Token expirado, refrescando...');
        await this.infoAutosApi.refreshAccessToken();
        console.log('‚úÖ Tokens refrescados correctamente');
      }
    } catch (error) {
      console.error('‚ùå Error refrescando tokens:', error);
      throw error;
    }
  }

  // Verificar si est√° usando fallback para a√±os
  isUsingFallbackForYears() {
    return this.useFallbackForYears;
  }

  // Forzar uso de fallback para a√±os
  forceFallbackForYears() {
    this.useFallbackForYears = true;
    console.log('üîÑ Forzando uso de datos de fallback para a√±os');
  }
}

module.exports = VehicleDataService;
